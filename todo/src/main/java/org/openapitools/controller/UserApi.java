/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;

import org.openapitools.api.ApiException;
import org.openapitools.model.dto.CreateReminderRequest;
import org.openapitools.model.dto.TaskResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Validated
@Tag(name = "users", description = "the users API")
public interface UserApi {

	/**
	 * GET /user/info : Get information about user
	 *
	 * @return Information about user (status code 200)
	 * or resources is forbidden (status code 403)
	 */
	@Operation(
			operationId = "info",
			summary = "Get information about user",
			tags = {"users"},
			responses = {
					@ApiResponse(responseCode = "200", description = "Accepted"),
					@ApiResponse(responseCode = "403", description = "Resources is forbidden"),
			}
	)
	@RequestMapping(
			method = RequestMethod.GET,
			value = "/user/info"
	)
	default ResponseEntity<String> getUserInfo() throws ApiException {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	/**
	 * POST /user/register : Post information about user
	 *
	 * @return Created user (status code 201)
	 * or resources is forbidden (status code 403)
	 * or Resource not found (status code 404)
	 */
	@Operation(
			operationId = "register",
			summary = "Post information about user",
			tags = {"users"},
			responses = {
					@ApiResponse(responseCode = "201", description = "User created", content = {
							@Content(mediaType = "application/json")
					}),
					@ApiResponse(responseCode = "403", description = "Resources is forbidden"),
					@ApiResponse(responseCode = "404", description = "Resource not found")
			}
	)
	@RequestMapping(
			method = RequestMethod.POST,
			value = "/user/register"
	)
	default ResponseEntity<String> userRegister(
			@Parameter(name = "userId", description = "User identifier", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId) throws ApiException {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}
}
