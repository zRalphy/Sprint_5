/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.UserLoginRequest;
import org.openapitools.model.UserRegisterRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-02T20:47:24.972943100+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user/login : Authenticate the user
     *
     * @param userLoginRequest  (required)
     * @return Succesful authentication (status code 200)
     *         or Request body is invalid (status code 400)
     *         or Password in incorrect (status code 401)
     *         or User doesn\\&#39;t exists (status code 404)
     */
    @Operation(
        operationId = "login",
        summary = "Authenticate the user",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Succesful authentication"),
            @ApiResponse(responseCode = "400", description = "Request body is invalid"),
            @ApiResponse(responseCode = "401", description = "Password in incorrect"),
            @ApiResponse(responseCode = "404", description = "User doesn\\'t exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/login",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> login(
        @Parameter(name = "UserLoginRequest", description = "", required = true) @Valid @RequestBody UserLoginRequest userLoginRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/register : Creates new user
     *
     * @param userRegisterRequest  (required)
     * @return User created (status code 200)
     *         or Request body is invalid (status code 400)
     *         or User already exists (status code 409)
     */
    @Operation(
        operationId = "register",
        summary = "Creates new user",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User created"),
            @ApiResponse(responseCode = "400", description = "Request body is invalid"),
            @ApiResponse(responseCode = "409", description = "User already exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/register",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> register(
        @Parameter(name = "UserRegisterRequest", description = "", required = true) @Valid @RequestBody UserRegisterRequest userRegisterRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
