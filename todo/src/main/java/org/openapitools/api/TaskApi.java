/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.TaskCreateRequest;
import org.openapitools.model.TaskResponse;
import org.openapitools.model.TaskUpdateRequest;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-02T20:47:24.972943100+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "tasks", description = "the tasks API")
public interface TaskApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /task : Creates new task
     *
     * @param userId  (required)
     * @param taskCreateRequest  (required)
     * @return Task created (status code 201)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createTask",
        summary = "Creates new task",
        tags = { "tasks" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Task created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TaskResponse> createTask(
        @NotNull @Parameter(name = "userId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "userId", required = true) String userId,
        @Parameter(name = "TaskCreateRequest", description = "", required = true) @Valid @RequestBody TaskCreateRequest taskCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2000-01-23\", \"name\" : \"name\", \"id\" : 58206234, \"isDone\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /task/{taskId} : Deletes the task
     *
     * @param userId  (required)
     * @param taskId Task identifier (required)
     * @return Task deleted (status code 204)
     *         or Access token is missing or invalid (status code 401)
     *         or Resource is forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "deleteTask",
        summary = "Deletes the task",
        tags = { "tasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Task deleted"),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Resource is forbidden"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/task/{taskId}"
    )
    default ResponseEntity<Void> deleteTask(
        @NotNull @Parameter(name = "userId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "userId", required = true) String userId,
        @Parameter(name = "taskId", description = "Task identifier", required = true, in = ParameterIn.PATH) @PathVariable("taskId") UUID taskId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task/{taskId} : Returns task
     *
     * @param userId  (required)
     * @param taskId Task identifier (required)
     * @return Task details (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Resource is forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTask",
        summary = "Returns task",
        tags = { "tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Resource is forbidden"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{taskId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TaskResponse> getTask(
        @NotNull @Parameter(name = "userId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "userId", required = true) String userId,
        @Parameter(name = "taskId", description = "Task identifier", required = true, in = ParameterIn.PATH) @PathVariable("taskId") UUID taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2000-01-23\", \"name\" : \"name\", \"id\" : 58206234, \"isDone\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task : List all the tasks for a user
     *
     * @param userId  (required)
     * @return Tasks list (status code 200)
     */
    @Operation(
        operationId = "listTasks",
        summary = "List all the tasks for a user",
        tags = { "tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tasks list", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TaskResponse>> listTasks(
        @NotNull @Parameter(name = "userId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "userId", required = true) String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"dueDate\" : \"2000-01-23\", \"name\" : \"name\", \"id\" : 58206234, \"isDone\" : true }, { \"dueDate\" : \"2000-01-23\", \"name\" : \"name\", \"id\" : 58206234, \"isDone\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /task/{taskId} : Updates existing task
     *
     * @param userId  (required)
     * @param taskId Task identifier (required)
     * @param taskUpdateRequest  (required)
     * @return Updated task (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Resource is forbidden (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateTask",
        summary = "Updates existing task",
        tags = { "tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated task", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Resource is forbidden"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/task/{taskId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TaskResponse> updateTask(
        @NotNull @Parameter(name = "userId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "userId", required = true) String userId,
        @Parameter(name = "taskId", description = "Task identifier", required = true, in = ParameterIn.PATH) @PathVariable("taskId") UUID taskId,
        @Parameter(name = "TaskUpdateRequest", description = "", required = true) @Valid @RequestBody TaskUpdateRequest taskUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2000-01-23\", \"name\" : \"name\", \"id\" : 58206234, \"isDone\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
